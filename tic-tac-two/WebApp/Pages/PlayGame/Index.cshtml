@page
@using GameBrain
@model WebApp.Pages.Index

<h1>TIC-TAC-TWO</h1>

<p>Next move by: @Model.TicTacTwoBrain.CurrentPlayer</p>
<p>Pieces left for Player X: @Model.TicTacTwoBrain.PiecesLeftX</p>
<p>Pieces left for Player O: @Model.TicTacTwoBrain.PiecesLeftO</p>

@if (TempData["PlayerX"] != null)
{
    <p>Player X is: @TempData["PlayerX"]</p>
}

@if (TempData["PlayerO"] != null)
{
<p>Player O is: @TempData["PlayerO"]</p>
}

<p>@ViewData["Message"]</p>

@if (TempData["ErrorMessage"] != null)
{
<div class="alert alert-warning">
    @TempData["ErrorMessage"]
</div>
}

<table class="table table-bordered">
    @for (int y = 0; y < Model.TicTacTwoBrain.DimensionY; y++)
    {
    <tr>
        @for (int x = 0; x < Model.TicTacTwoBrain.DimensionX; x++)
        {
        <td>
            @if (Model.TicTacTwoBrain.GameBoard[x][y] == EGamePiece.Empty)
            {
            @if (Model.TicTacTwoBrain.IsCellInGrid(x, y))
            {
            <form method="post" style="display:inline;" class="game-form">
                <input type="hidden" name="CoordinateX" value="@x" />
                <input type="hidden" name="CoordinateY" value="@y" />
                <input type="hidden" name="SelectedAction" id="selectedAction" value="" />
                <input type="hidden" name="OldCoordinateX" id="oldCoordinateX" value="" />
                <input type="hidden" name="OldCoordinateY" id="oldCoordinateY" value="" />
                <button type="submit" class="btn btn-warning">Place</button>
            </form>
            } else
            {
            <form method="post" style="display:inline;" class="game-form">
                <input type="hidden" name="CoordinateX" value="@x" />
                <input type="hidden" name="CoordinateY" value="@y" />
                <input type="hidden" name="SelectedAction" id="selectedAction" value="" />
                <input type="hidden" name="OldCoordinateX" id="oldCoordinateX" value="" />
                <input type="hidden" name="OldCoordinateY" id="oldCoordinateY" value="" />
                <button type="submit" class="btn btn-outline-primary">Place</button>
            </form>
            }
            }
            else
            {
            @if (Model.TicTacTwoBrain.IsCellInGrid(x, y))
            {
            <form method="post" style="display:inline;" class="game-form">
                <input type="hidden" name="CoordinateX" value="@x" />
                <input type="hidden" name="CoordinateY" value="@y" />
                <input type="hidden" name="SelectedAction" id="selectedAction" value="" />
                <input type="hidden" name="OldCoordinateX" id="oldCoordinateX" value="" />
                <input type="hidden" name="OldCoordinateY" id="oldCoordinateY" value="" />
                <button type="submit" class="btn btn-warning">@Model.TicTacTwoBrain.GameBoard[x][y]</button>
            </form>
            } else
            {
            <form method="post" style="display:inline;" class="game-form">
                <input type="hidden" name="CoordinateX" value="@x" />
                <input type="hidden" name="CoordinateY" value="@y" />
                <input type="hidden" name="SelectedAction" id="selectedAction" value="" />
                <input type="hidden" name="OldCoordinateX" id="oldCoordinateX" value="" />
                <input type="hidden" name="OldCoordinateY" id="oldCoordinateY" value="" />
                <button type="submit" class="btn btn-outline-primary">@Model.TicTacTwoBrain.GameBoard[x][y]</button>
            </form>
            }
            }
        </td>
        }
    </tr>
    }
</table>

<form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    @foreach (var action in Model.ActionSelectList)
    {
        <div class="form-group">
            <input type="checkbox" id="@action" name="SelectedAction" value="@action" />
            <label for="@action">@action</label>
        </div>
    }

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const refreshInterval = 10000; // = 10 sekundit

        // Värskendage lehte iga 10 sekundi tagant
        setInterval(function() {
            location.reload(); // Lehe värskendamine
        }, refreshInterval);
    
        const checkboxes = document.querySelectorAll('input[name="SelectedAction"]');
        const forms = document.querySelectorAll('.game-form');
        let moveOldButtonSelected = false;
        let oldCoordinateX = null;
        let oldCoordinateY = null;

        function updateSelectedActionValue() {
            const selectedCheckbox = document.querySelector('input[name="SelectedAction"]:checked');
            const selectedActionValue = selectedCheckbox ? selectedCheckbox.value : "";
            forms.forEach(form => {
                const selectedActionInput = form.querySelector('input[name="SelectedAction"]');
                selectedActionInput.value = selectedActionValue;
            });

            if (selectedActionValue === "MoveOldButton") {
                moveOldButtonSelected = true;
            } else {
                moveOldButtonSelected = false;
            }
        }

        function handleFormSubmission(event) {
            if (moveOldButtonSelected) {
                event.preventDefault(); // peatab vormi esitamise

                const form = event.target.closest("form");
                const x = form.querySelector('input[name="CoordinateX"]').value;
                const y = form.querySelector('input[name="CoordinateY"]').value;

                if (oldCoordinateX === null && oldCoordinateY === null) {
                    oldCoordinateX = x;
                    oldCoordinateY = y;
                } else {
                    form.querySelector('input[name="OldCoordinateX"]').value = oldCoordinateX;
                    form.querySelector('input[name="OldCoordinateY"]').value = oldCoordinateY;
                    form.submit(); // esitab vormi teisel klikkimisel
                    oldCoordinateX = null;
                    oldCoordinateY = null;
                }
            }
        }

        // Add change event listener to checkboxes
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateSelectedActionValue);
        });

        // Add submit event listener to forms
        forms.forEach(form => {
            form.addEventListener('submit', handleFormSubmission);
        });
    });
</script>
}